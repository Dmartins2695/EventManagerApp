<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/android/app/src/debug/AndroidManifest.xml;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/android/app/src/main/java/com/clientname/eventmanagerapp/MainActivity.kt;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/android/app/src/main/java/com/clientname/eventmanagerapp/MainApplication.kt;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/android/app/src/main/res/drawable/ic_launcher_background.xml;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/android/app/src/main/res/drawable/rn_edit_text_material.xml;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/android/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/android/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/android/app/src/main/res/values/colors.xml;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/android/app/src/main/res/values/strings.xml;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/android/app/src/main/res/values/styles.xml;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/android/app/src/main/res/values-night/colors.xml;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/android/app/src/main/AndroidManifest.xml;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/android/app/google-services.json;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/app/auth/signin.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/app/auth/splash-screen.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/app/user/dashboard.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/app/_layout.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/app/index.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/components/ui/button/index.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/components/ui/checkbox/index.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/components/ui/form-control/index.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/components/ui/gluestack-ui-provider/config.ts;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/components/ui/gluestack-ui-provider/index.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/components/ui/gluestack-ui-provider/index.web.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/components/ui/gluestack-ui-provider/script.ts;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/components/ui/heading/index.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/components/ui/heading/index.web.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/components/ui/heading/styles.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/components/ui/hstack/index.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/components/ui/hstack/index.web.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/components/ui/hstack/styles.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/components/ui/icon/index.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/components/ui/icon/index.web.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/components/ui/image/index.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/components/ui/input/index.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/components/ui/link/index.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/components/ui/pressable/index.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/components/ui/safe-area-view/index.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/components/ui/scroll-view/index.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/components/ui/spinner/index.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/components/ui/text/index.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/components/ui/text/index.web.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/components/ui/text/styles.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/components/ui/toast/index.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/components/ui/vstack/index.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/components/ui/vstack/index.web.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/components/ui/vstack/styles.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/screens/auth/layout/_layout.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/screens/auth/screen-splash/assets/icons/gluestack-icon/index.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/screens/auth/screen-splash/screen-splash.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/screens/auth/signin/signin.tsx;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/app.json;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/babel.config.js;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/firebaseConfig.js;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/global.css;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/gluestack-ui.config.json;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/google-services.json;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/metro.config.js;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/nativewind-env.d.ts;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/package-lock.json;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/package.json;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/README.md;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/tailwind.config.js;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp/tsconfig.json" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp&quot;:&quot;{\&quot;/android/app/src/main/java/com/clientname/eventmanagerapp/MainActivity.kt\&quot;:\&quot;This file appears to be an Android activity class for a React Native application. It does not contain any additional classes, but it does have several functions:\\n\\n`MainActivity`: This is the main activity class for the Android application, which handles the initialization and setup of the React Native application.\\n\\n`onCreate`: This function is called when the activity is created, and it sets up the splash screen and other necessary components for the application.\\n\\n`getMainComponentName`: This function returns the name of the main component registered from JavaScript, which is used to schedule the rendering of the component.\\n\\n`createReactActivityDelegate`: This function returns the instance of the `ReactActivityDelegate`, which is used to enable the New Architecture with a single boolean flag.\\n\\n`invokeDefaultOnBackPressed`: This function aligns the back button behavior with Android S, where moving root activities to the background instead of finishing activities.\\n\\nOverall, this file sets up the main Android activity for a React Native application, handling the initialization, splash screen, and back button behavior.\&quot;,\&quot;/components/ui/link/index.tsx\&quot;:\&quot;This file defines a custom `Link` and `LinkText` component using the `createLink` function from the `@gluestack-ui/link` package. It also utilizes various utility functions from the `@gluestack-ui/nativewind-utils` package to handle styling and state management. The file exports the `Link` and `LinkText` components, which can be used in a React Native application.\\n\\n`UILink`: A custom link component that wraps the `Pressable` component and applies platform-specific styling and state management.\\n\\n`linkStyle`: A set of base styles for the `Link` component, including styles for focus, disabled, and hover states.\\n\\n`linkTextStyle`: A set of base styles and variants for the `LinkText` component, including styles for size, bold, underline, strikethrough, and other text-related properties.\\n\\n`Link`: A React component that renders the `UILink` component with the `linkStyle` applied.\\n\\n`LinkText`: A React component that renders the `UILink.Text` component with the `linkTextStyle` applied.\&quot;,\&quot;/components/ui/form-control/index.tsx\&quot;:\&quot;This file defines a set of React components for a form control UI element. It uses the `@gluestack-ui/form-control` library and the `@gluestack-ui/nativewind-utils` library to create a customizable and stylable form control component. The file exports several sub-components, including `FormControl`, `FormControlError`, `FormControlErrorText`, `FormControlErrorIcon`, `FormControlLabel`, `FormControlLabelText`, `FormControlLabelAstrick`, `FormControlHelper`, and `FormControlHelperText`.\\n\\n`PrimitiveIcon`: A React component that renders an SVG icon with customizable size, color, and stroke properties.\\n\\n`FormControl`: The main form control component that wraps the entire form control UI.\\n\\n`FormControlError`: A component that renders an error message for the form control.\\n\\n`FormControlErrorText`: A component that renders the text for the form control error message.\\n\\n`FormControlErrorIcon`: A component that renders an icon for the form control error message.\\n\\n`FormControlLabel`: A component that renders the label for the form control.\\n\\n`FormControlLabelText`: A component that renders the text for the form control label.\\n\\n`FormControlLabelAstrick`: A component that renders an asterisk for the form control label.\\n\\n`FormControlHelper`: A component that renders a helper message for the form control.\\n\\n`FormControlHelperText`: A component that renders the text for the form control helper message.\&quot;,\&quot;/components/ui/heading/index.tsx\&quot;:\&quot;This file defines a React component called `Heading` that renders different heading elements (`H1` to `H6`) based on the provided `size` prop. It also includes a `MappedHeading` component that is a memoized and forwarded version of the `Heading` component.\\n\\n`IHeadingProps`: Defines the props interface for the `Heading` component.\\n\\n`cssInterop`: Applies the `style` class to the `H1` to `H6` components.\\n\\n`MappedHeading`: A memoized and forwarded version of the `Heading` component that renders the appropriate heading element based on the `size` prop.\\n\\n`Heading`: A memoized and forwarded React component that renders a heading element with various style props applied.\&quot;,\&quot;/components/ui/icon/index.tsx\&quot;:\&quot;This file defines a set of React components and utility functions for creating and using icons in a React Native application. Here\\u0027s a summary of the classes and functions in the file:\\n\\n`PrimitiveIcon`: A React component that renders an SVG icon with customizable size, color, and other properties.\\n\\n`UIIcon`: A wrapper around the `PrimitiveIcon` component that provides additional styling and functionality.\\n\\n`Icon`: A React component that extends the `UIIcon` component and provides a more user-friendly interface for using icons.\\n\\n`createIconUI`: A function that creates a new icon component with a specified SVG path and other properties.\\n\\nThe file also defines a set of pre-built icon components, such as `AddIcon`, `AlertCircleIcon`, `ArrowUpIcon`, `ArrowDownIcon`, `ArrowRightIcon`, `ArrowLeftIcon`, and many others, each with a unique SVG path and display name.\&quot;,\&quot;/android/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml\&quot;:\&quot;This file is an XML configuration for an adaptive icon in an Android application. It does not contain any classes or functions, but rather defines the background and foreground elements of the icon.\\n\\n`adaptive-icon`: This element specifies that the icon is an adaptive icon, which means it can be displayed in different shapes and sizes on different Android devices.\\n\\n`background`: This element defines the background color of the adaptive icon, which is specified as a color resource `@color/iconBackground`.\\n\\n`foreground`: This element defines the foreground image of the adaptive icon, which is specified as a bitmap resource `@mipmap/ic_launcher_foreground`.\&quot;,\&quot;/components/ui/icon/index.web.tsx\&quot;:\&quot;This file defines a set of React components and utility functions for creating and managing icons in a React application. Here\\u0027s a summary of the classes and functions in the file:\\n\\n`accessClassName`: A function that extracts the second key from an object in a style array.\\n\\n`Svg`: A React component that renders an SVG element with a calculated class name.\\n\\n`PrimitiveIcon`: A React component that renders an icon with various size and color properties.\\n\\n`UIIcon`: A React component created using the `createIcon` function, which serves as the root component for all icons.\\n\\n`iconStyle`: A set of Tailwind CSS styles for defining the size of icons.\\n\\n`Icon`: A React component that wraps the `UIIcon` component and applies the `iconStyle` styles.\\n\\n`createIconUI`: A function that creates a new icon component with the `Svg` component as the root.\\n\\nThe file also defines a set of individual icon components, such as `AddIcon`, `AlertCircleIcon`, `ArrowUpIcon`, and many others, each with its own SVG path and properties.\&quot;,\&quot;/components/ui/input/index.tsx\&quot;:\&quot;This file defines a custom input component for a React Native application using the `@gluestack-ui/input` library. It includes several sub-components and utility functions to handle the styling and behavior of the input field. Here\\u0027s a list of the classes and functions in the file:\\n\\n`PrimitiveIcon`: A React component that renders an SVG icon with customizable properties.\\n\\n`InputWrapper`: A React component that serves as a wrapper for the input field.\\n\\n`UIInput`: A custom input component created using the `createInput` function from `@gluestack-ui/input`.\\n\\n`inputStyle`: A function that returns a set of styles for the input field based on the provided variant and size.\\n\\n`inputIconStyle`: A function that returns a set of styles for the input icon based on the provided size.\\n\\n`inputSlotStyle`: A function that returns a set of styles for the input slot (Pressable component) based on the provided variant and size.\\n\\n`inputFieldStyle`: A function that returns a set of styles for the input field (TextInput component) based on the provided variant and size.\\n\\n`Input`: A React component that renders the custom input field with the provided props and styles.\\n\\n`InputIcon`: A React component that renders the input icon with the provided props and styles.\\n\\n`InputSlot`: A React component that renders the input slot (Pressable component) with the provided props and styles.\\n\\n`InputField`: A React component that renders the input field (TextInput component) with the provided props and styles.\&quot;,\&quot;/global.css\&quot;:\&quot;This file appears to be a Tailwind CSS configuration file. It does not contain any classes or functions, but rather it is importing the base, components, and utilities styles from the Tailwind CSS framework. This allows the developer to use the pre-defined utility classes and components provided by Tailwind CSS in their project.\\n\\nThe purpose of this file is to set up the Tailwind CSS framework for use in the project, enabling the developer to quickly and easily apply consistent styles and layouts to their web application.\&quot;,\&quot;/android/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml\&quot;:\&quot;This file is an XML configuration for an adaptive icon in an Android application. It does not contain any classes or functions, but rather defines the background and foreground elements of the icon.\\n\\n`adaptive-icon`: This element specifies that the icon is an adaptive icon, which means it can be displayed in different shapes and sizes on different Android devices.\\n\\n`background`: This element defines the background color of the adaptive icon, which is specified as a color resource `@color/iconBackground`.\\n\\n`foreground`: This element defines the foreground image of the adaptive icon, which is specified as a bitmap resource `@mipmap/ic_launcher_foreground`.\&quot;,\&quot;/components/ui/gluestack-ui-provider/config.ts\&quot;:\&quot;This file does not contain any classes or functions. Instead, it exports a configuration object named `config` that defines a set of CSS variables for a light and dark theme. The variables cover various color palettes, including primary, secondary, tertiary, error, success, warning, info, typography, outline, and background colors. The file is likely used to provide a consistent and customizable color scheme for a web application or UI.\&quot;,\&quot;/components/ui/vstack/index.tsx\&quot;:\&quot;This file defines a React component called `VStack` that represents a vertical stack layout in a React Native application.\\n\\n`IVStackProps`: A type that represents the props for the `VStack` component, including the standard `React.ComponentProps\\u003ctypeof View\\u003e` and custom `VariantProps\\u003ctypeof vstackStyle\\u003e`.\\n\\n`VStack`: A React component that renders a `View` element with a vertical stack layout, with support for customizing the spacing and direction of the stack.\\n\\n`vstackStyle`: A function that generates a CSS-like style object based on the provided props, which is used to apply the appropriate styles to the `View` element.\&quot;,\&quot;/android/app/src/main/res/drawable/rn_edit_text_material.xml\&quot;:\&quot;This file is an XML resource file that defines the appearance of an edit text field in an Android application. It does not contain any classes or functions, but rather defines the visual properties of the edit text field, such as the inset padding and the drawable background to be used in different states (enabled, disabled, focused, etc.).\\n\\nThe file is licensed under the Apache License, Version 2.0, and is part of the Android Open Source Project.\&quot;,\&quot;/screens/auth/screen-splash/assets/icons/gluestack-icon/index.tsx\&quot;:\&quot;This file defines two custom icons using the `createIcon` function from the `@gluestack-ui/icon` library. The icons are named `GluestackIcon` and `GluestackIconDark`, and they are designed to display the Gluestack logo in different color schemes.\\n\\n`GluestackIcon`: Defines a custom icon with the Gluestack logo in a light color scheme.\\n\\n`GluestackIconDark`: Defines a custom icon with the Gluestack logo in a dark color scheme.\\n\\nThe file does not contain any other classes or functions.\&quot;,\&quot;/screens/auth/layout/_layout.tsx\&quot;:\&quot;This file does not contain any classes or functions. Instead, it defines a React component called `AuthLayout` that provides a layout for authentication-related screens in a React Native application. The layout includes a background image on the left side and a content area on the right side, which is used to render the children components passed to the `AuthLayout` component.\\n\\nThe file also imports several UI components from the `@/components/ui` directory, such as `HStack`, `VStack`, `SafeAreaView`, `ScrollView`, and `Image`, which are used to build the layout.\&quot;,\&quot;/gluestack-ui.config.json\&quot;:\&quot;This file appears to be a JSON configuration object that contains information about a Tailwind CSS setup and an application. There are no classes or functions defined in this file. Instead, it provides the following configuration details:\\n\\n`\\\&quot;tailwind\\\&quot;`: This object contains the configuration for Tailwind CSS, including the location of the Tailwind configuration file (`\\\&quot;config\\\&quot;`) and the global CSS file (`\\\&quot;css\\\&quot;`).\\n\\n`\\\&quot;app\\\&quot;`: This object contains information about the application, including the entry point for the application layout (`\\\&quot;entry\\\&quot;`) and the location of the UI components (`\\\&quot;components\\\&quot;`).\\n\\nOverall, this file serves as a centralized configuration for the project, specifying the necessary settings for the Tailwind CSS setup and the application structure.\&quot;,\&quot;/app/user/dashboard.tsx\&quot;:\&quot;This file does not contain any classes. It contains the following function:\\n\\n`Dashboard`: This function renders a view that displays a welcome message with the email of the currently authenticated user.\\n\\nThe file imports the `View` component from `react-native`, the `Text` component from a custom UI library, and the `auth` module from the `@react-native-firebase/auth` library. It then defines a functional component called `Dashboard` that retrieves the currently authenticated user\\u0027s email and displays it in a `Text` component within a `View` component.\&quot;,\&quot;/components/ui/gluestack-ui-provider/index.web.tsx\&quot;:\&quot;This file does not contain any classes. It contains the following functions:\\n\\n`useSafeLayoutEffect`: A custom React hook that uses `useLayoutEffect` if the window object is available, and `useEffect` otherwise.\\n\\n`GluestackUIProvider`: A React component that sets up the necessary providers and styles for the GlueStack UI library, handling different color modes and media queries.\\n\\n`createStyle`: A helper function that creates a new `\\u003cstyle\\u003e` element with the specified ID.\\n\\n`handleMediaQuery`: A callback function that updates the color mode based on the user\\u0027s system preference.\\n\\nThis file is responsible for setting up the GlueStack UI library and managing the color mode of the application, ensuring that the styles are properly applied and updated based on the user\\u0027s preferences.\&quot;,\&quot;/components/ui/image/index.tsx\&quot;:\&quot;This file defines a custom `Image` component for a React Native application using the `@gluestack-ui/image` library and the `nativewind` utility.\\n\\n`imageStyle`: A set of styles defined using the `tva` function from `@gluestack-ui/nativewind-utils/tva`, which includes size variants for the image.\\n\\n`UIImage`: A custom image component created using the `createImage` function from `@gluestack-ui/image`.\\n\\n`Image`: A React component that wraps the `UIImage` component and applies the `imageStyle` based on the provided `size` prop. It also handles the different styles required for web and mobile platforms.\&quot;,\&quot;/components/ui/pressable/index.tsx\&quot;:\&quot;This file defines a custom `Pressable` component that extends the functionality of the `RNPressable` component from the `react-native` library. It uses the `createPressable` function from the `@gluestack-ui/pressable` library and applies various styles and utilities from the `@gluestack-ui/nativewind-utils` and `nativewind` libraries.\\n\\n`createPressable`: A function that creates a custom `Pressable` component.\\n`pressableStyle`: A set of styles applied to the `Pressable` component.\\n`Pressable`: A custom `Pressable` component that extends the functionality of the `RNPressable` component and applies the `pressableStyle` styles.\&quot;,\&quot;/babel.config.js\&quot;:\&quot;This file is a Babel configuration file for a React Native project. It sets up the necessary presets and plugins for the project, including:\\n\\n`module.exports`: This function exports the Babel configuration object, which is used by the project\\u0027s build process.\\n\\n`imageBabel`: This is a reference to the `@unitools/babel-plugin-universal-image` plugin, which is used to handle image imports in the project.\\n\\n`path`: This is a reference to the Node.js `path` module, which is used for file path manipulation.\\n\\nThe configuration includes the following presets and plugins:\\n\\n- `\\u0027babel-preset-expo\\u0027`: This preset is used for Expo compatibility.\\n- `\\u0027@babel/preset-env\\u0027`: This preset is used to specify the target environment for the project.\\n- `\\u0027@babel/preset-react\\u0027`: This preset is used to enable parsing of JSX.\\n- `\\u0027nativewind/babel\\u0027`: This plugin is used to enable the use of the NativeWind library.\\n- `\\u0027module-resolver\\u0027`: This plugin is used to set up aliases for certain modules in the project.\\n- `\\u0027react-native-reanimated/plugin\\u0027`: This plugin is used to enable the use of the React Native Reanimated library.\&quot;,\&quot;/tailwind.config.js\&quot;:\&quot;This file is a Tailwind CSS configuration file that defines the styles and theme for a React Native application. It uses the `@gluestack-ui/nativewind-utils/tailwind-plugin` plugin to integrate Tailwind CSS with the application. The file defines various color palettes, font families, font weights, font sizes, and box shadows that can be used throughout the application. It also includes a list of safe classes that can be used without causing any issues.\&quot;,\&quot;/components/ui/gluestack-ui-provider/script.ts\&quot;:\&quot;This file does not contain any classes. It contains the following functions:\\n\\n`script`: This function sets the color mode of the document element based on the provided mode parameter, which can be either \\u0027light\\u0027, \\u0027dark\\u0027, or \\u0027system\\u0027. If the mode is \\u0027system\\u0027, it uses the user\\u0027s system color preference to determine the color mode.\\n\\n`getSystemColorMode`: This function returns the user\\u0027s system color preference, which is either \\u0027light\\u0027 or \\u0027dark\\u0027.\\n\\nIn summary, this file provides a utility function to set the color mode of a web page based on user preferences or a specified mode.\&quot;,\&quot;/components/ui/checkbox/index.tsx\&quot;:\&quot;This file appears to be a React component that implements a checkbox UI element. It uses the `@gluestack-ui/checkbox` library and the `@gluestack-ui/nativewind-utils` library to create a customizable checkbox component. The file defines several sub-components and styles that can be used to build the checkbox UI.\\n\\n`IndicatorWrapper`: A wrapper component for the checkbox indicator.\\n`LabelWrapper`: A wrapper component for the checkbox label.\\n`IconWrapper`: A wrapper component for the checkbox icon.\\n`PrimitiveIcon`: A component that renders an SVG icon with customizable properties.\\n`UICheckbox`: The main checkbox component, created using the `createCheckbox` function from `@gluestack-ui/checkbox`.\\n`checkboxStyle`: A style function that defines the base styles for the checkbox.\\n`checkboxIndicatorStyle`: A style function that defines the styles for the checkbox indicator.\\n`checkboxLabelStyle`: A style function that defines the styles for the checkbox label.\\n`checkboxIconStyle`: A style function that defines the styles for the checkbox icon.\\n`CheckboxGroup`: A component that groups multiple checkboxes together.\\n`Checkbox`: The main checkbox component, which uses the `UICheckbox` component and applies the `checkboxStyle` styles.\\n`CheckboxIndicator`: A component that renders the checkbox indicator, using the `checkboxIndicatorStyle` styles.\\n`CheckboxLabel`: A component that renders the checkbox label, using the `checkboxLabelStyle` styles.\\n`CheckboxIcon`: A component that renders the checkbox icon, using the `checkboxIconStyle` styles.\&quot;,\&quot;/components/ui/scroll-view/index.tsx\&quot;:\&quot;This file does not contain any classes or functions. It is a client-side file that exports the `ScrollView` component from the `react-native` library. The purpose of this file is to provide a way to use the `ScrollView` component in a React application that is running on the client-side.\&quot;,\&quot;/components/ui/safe-area-view/index.tsx\&quot;:\&quot;This file does not contain any classes or functions. It exports the `SafeAreaView` component from the `react-native` library, which is used to ensure that the content of a React Native application is displayed within the safe area of the device\\u0027s screen, taking into account any notches, status bars, or other display elements that may be present.\&quot;,\&quot;/app.json\&quot;:\&quot;This file is an Expo configuration file for an event management application. It does not contain any classes or functions, but rather defines the application\\u0027s settings, dependencies, and other configuration options. Here\\u0027s a summary of the key elements in the file:\\n\\n`expo`: Configures the Expo settings for the application, including the name, slug, version, orientation, icon, scheme, user interface style, and new architecture enablement.\\n\\n`ios`: Configures the iOS-specific settings, such as the Google Services file, bundle identifier, support for tablets, and motion usage description.\\n\\n`android`: Configures the Android-specific settings, such as the Google Services file, package name, and adaptive icon.\\n\\n`web`: Configures the web-specific settings, such as the bundler, output, and favicon.\\n\\n`plugins`: Specifies the Expo plugins used in the application, including Firebase, Expo Router, and Expo Splash Screen.\\n\\n`experiments`: Enables the typed routes feature for the Expo Router.\\n\\nOverall, this file sets up the necessary configuration for the event management application to run on various platforms (iOS, Android, and web) and integrates with Firebase services for authentication, messaging, and other functionalities.\&quot;,\&quot;/components/ui/button/index.tsx\&quot;:\&quot;This file defines a set of React components for creating buttons with various styles and functionality. Here\\u0027s a summary of the classes and functions in the file:\\n\\n`ButtonWrapper`: A wrapper component for the Pressable component.\\n\\n`PrimitiveIcon`: A component that renders an SVG icon with customizable size, color, and stroke properties.\\n\\n`Root`: A wrapper component that applies style context and states to the ButtonWrapper component.\\n\\n`UIButton`: A button component created using the createButton function, which includes various sub-components like Text, Group, Spinner, and Icon.\\n\\n`buttonStyle`: A function that generates a set of styles for the button based on its action, variant, and size.\\n\\n`buttonTextStyle`: A function that generates a set of styles for the button text based on its action, variant, and size.\\n\\n`buttonIconStyle`: A function that generates a set of styles for the button icon based on its variant and size.\\n\\n`buttonGroupStyle`: A function that generates a set of styles for a group of buttons based on the space between them and whether they are attached.\\n\\n`Button`: A React component that renders a button with the styles defined by the `buttonStyle` function.\\n\\n`ButtonText`: A React component that renders the text inside the button with the styles defined by the `buttonTextStyle` function.\\n\\n`ButtonSpinner`: A React component that renders a spinner inside the button.\\n\\n`ButtonIcon`: A React component that renders an icon inside the button with the styles defined by the `buttonIconStyle` function.\\n\\n`ButtonGroup`: A React component that renders a group of buttons with the styles defined by the `buttonGroupStyle` function.\&quot;,\&quot;/nativewind-env.d.ts\&quot;:\&quot;This file appears to be a TypeScript file that references the `nativewind/types` library. It does not contain any classes or functions. The file likely serves as a configuration or setup file for the `nativewind` library, which is a library for using Tailwind CSS in native environments like React Native.\&quot;,\&quot;/components/ui/text/styles.tsx\&quot;:\&quot;This file does not contain any classes or functions. Instead, it defines a set of styles for text elements using the `tva` (Tailwind Variant Adapter) utility from the `@gluestack-ui/nativewind-utils` package.\\n\\nThe file exports a `textStyle` object that provides a base style and various variants for text elements. The base style includes common CSS properties for text, and the variants allow for customizing the text\\u0027s appearance, such as truncation, bold, underline, strike-through, size, subscript, italics, and highlighting.\\n\\nThe file also checks if the code is running in a web environment using the `isWeb` utility, and applies different base styles accordingly.\&quot;,\&quot;/components/ui/text/index.web.tsx\&quot;:\&quot;This file defines a React component called `Text` that renders a `span` element with various style properties based on the provided props.\\n\\n`Text`: A React component that renders a `span` element with customizable styles based on the provided props.\\n\\n`textStyle`: A function that generates a CSS class name based on the provided props.\&quot;,\&quot;/android/app/src/debug/AndroidManifest.xml\&quot;:\&quot;This file is an Android manifest file, which is used to provide information about the application to the Android system. It does not contain any classes or functions, but rather defines the following:\\n\\n`uses-permission`: Declares the `SYSTEM_ALERT_WINDOW` permission, which allows the application to display windows on top of other applications.\\n\\n`application`: Configures the application to use cleartext traffic (HTTP) and sets the target API level to 28, while ignoring the Google App Indexing warning and replacing the `android:usesCleartextTraffic` attribute.\\n\\nIn summary, this manifest file sets up the necessary permissions and configuration for an Android application to function properly.\&quot;,\&quot;/app/_layout.tsx\&quot;:\&quot;This file is the main entry point for a React Native application built using Expo Router. It sets up the application\\u0027s theme, font, and navigation stack. Here\\u0027s a summary of the classes and functions in the file:\\n\\n`RootLayout`: This function is the main entry point for the application, responsible for loading fonts, handling errors, and rendering the navigation stack.\\n\\n`RootLayoutNav`: This function defines the navigation stack for the application, including screens for signing in, signing up, resetting a password, creating a new password, and accessing the user\\u0027s dashboard.\\n\\n`unstable_settings`: This object configures the initial route for the application, ensuring that the navigation stack starts with the tabs screen.\\n\\n`ErrorBoundary`: This component is imported from `expo-router` and is used to catch and handle any errors that occur in the navigation tree.\&quot;,\&quot;/android/app/src/main/AndroidManifest.xml\&quot;:\&quot;This file is an Android manifest file that defines the configuration and permissions for an Android application. It does not contain any classes or functions, but rather specifies the following:\\n\\n`MainApplication`: The main application class for the Android app.\\n\\n`MainActivity`: The main activity class that serves as the entry point for the app.\\n\\nThe manifest file also declares the following permissions:\\n- `INTERNET`: Allows the app to access the internet.\\n- `READ_EXTERNAL_STORAGE`: Allows the app to read files from the device\\u0027s external storage.\\n- `SYSTEM_ALERT_WINDOW`: Allows the app to display windows on top of other apps.\\n- `VIBRATE`: Allows the app to control the device\\u0027s vibrator.\\n- `WRITE_EXTERNAL_STORAGE`: Allows the app to write files to the device\\u0027s external storage.\\n\\nAdditionally, the manifest file specifies the app\\u0027s theme, splash screen, and launch mode, as well as the intent filters that define the app\\u0027s entry points.\&quot;,\&quot;/components/ui/text/index.tsx\&quot;:\&quot;This file does not contain any classes. It contains the following functions:\\n\\n`textStyle`: A function that generates a set of styles based on the provided props.\\n\\n`Text`: A React component that renders a `RNText` component with the styles generated by the `textStyle` function, and forwards the remaining props to the `RNText` component.\\n\\nThis file provides a custom `Text` component that can be used in a React Native application, with support for various text styles and properties.\&quot;,\&quot;/package-lock.json\&quot;:\&quot;This file appears to be a package.json file for an Expo project called \\\&quot;eventmanagerapp\\\&quot;. It lists the dependencies and devDependencies for the project, which include various UI components, Firebase integration, navigation, and other utilities. The file does not contain any classes or functions, but rather serves as a configuration file for the project\\u0027s dependencies.\&quot;,\&quot;/screens/auth/signin/signin.tsx\&quot;:\&quot;This file is a React component that implements a login screen for a mobile application. It uses the `react-hook-form` library to handle form validation and submission, and the `zod` library for schema validation. The file also includes various UI components and icons from custom libraries.\\n\\n`LoginWithLeftBackground`: This component renders the login screen with a left-aligned background and includes input fields for email and password, a \\\&quot;Remember me\\\&quot; checkbox, and buttons for login and Google sign-in.\\n\\n`onSubmit`: This function is called when the user submits the login form. It currently contains commented-out code that would handle the login process.\\n\\n`handleState`: This function toggles the visibility of the password input field.\\n\\n`handleKeyPress`: This function dismisses the keyboard and submits the login form.\\n\\n`SignIn`: This component wraps the `LoginWithLeftBackground` component with an `AuthLayout` component.\&quot;,\&quot;/components/ui/heading/styles.tsx\&quot;:\&quot;This file defines a set of styles for headings using the `tva` (Tailwind Variant Adapter) utility from the `@gluestack-ui/nativewind-utils` package. The file also checks if the application is running on the web or not using the `isWeb` utility.\\n\\n`baseStyle`: A set of base styles that are applied to all headings, depending on whether the application is running on the web or not.\\n\\n`headingStyle`: A set of styles for headings, including variants for truncation, bold, underline, strikethrough, subscript, italic, highlighting, and different font sizes.\&quot;,\&quot;/metro.config.js\&quot;:\&quot;This file does not contain any classes or functions. Instead, it exports a configuration object for the Expo Metro bundler, which is used to build and run Expo-based React Native applications. The configuration is obtained by calling the `getDefaultConfig` function from the `expo/metro-config` module, which returns the default Metro configuration for an Expo project. This configuration can be further customized as needed for the specific project.\&quot;,\&quot;/package.json\&quot;:\&quot;This file appears to be a package.json file for an Expo-based React Native application called \\\&quot;eventmanagerapp\\\&quot;. It lists the dependencies and devDependencies required for the project, as well as the scripts and configuration for testing, linting, and building the application. There are no classes or functions defined in this file, as it is a configuration file rather than a source code file.\\n\\nThe file sets up the project structure, dependencies, and scripts for managing the event manager application, which likely includes features such as user authentication, event management, and UI components from the `gluestack-ui` library.\&quot;,\&quot;/google-services.json\&quot;:\&quot;This file appears to be a JSON configuration file for a Firebase project. It does not contain any classes or functions, but rather provides information about the project, including the project number, project ID, storage bucket, and client information. The file is used to configure the Firebase SDK for use in an Android application with the package name \\\&quot;com.clientname.eventmanagerapp\\\&quot;.\&quot;,\&quot;/android/app/src/main/java/com/clientname/eventmanagerapp/MainApplication.kt\&quot;:\&quot;This file appears to be an Android application class that extends the `Application` class and implements the `ReactApplication` interface. It sets up the React Native host and configures the application\\u0027s lifecycle events. Here\\u0027s a breakdown of the classes and functions in the file:\\n\\n`MainApplication`: This class is the main application class that extends the `Application` class and implements the `ReactApplication` interface. It sets up the React Native host and configures the application\\u0027s lifecycle events.\\n\\n`onCreate()`: This function is overridden from the `Application` class and is called when the application is created. It initializes the SoLoader, checks if the new architecture is enabled, and dispatches the application creation event to the `ApplicationLifecycleDispatcher`.\\n\\n`onConfigurationChanged(newConfig: Configuration)`: This function is overridden from the `Application` class and is called when the device\\u0027s configuration changes. It dispatches the configuration change event to the `ApplicationLifecycleDispatcher`.\\n\\nThe file also includes several properties and overrides related to the React Native host, such as `reactNativeHost`, `reactHost`, `getPackages()`, `getJSMainModuleName()`, `getUseDeveloperSupport()`, `isNewArchEnabled`, and `isHermesEnabled`.\&quot;,\&quot;/screens/auth/screen-splash/screen-splash.tsx\&quot;:\&quot;This file contains a React component that renders a splash screen for a mobile application. It includes a logo, login, and sign-up buttons, and it checks the user\\u0027s authentication state to determine whether to redirect the user to the home screen or display the splash screen.\\n\\n`SplashScreenWithLeftBackground`: A component that renders the splash screen with a logo and login/sign-up buttons.\\n\\n`RedirectToHomeScreen`: A component that redirects the user to the home screen if they are authenticated.\\n\\n`SplashScreen`: The main component that checks the user\\u0027s authentication state and renders either the `RedirectToHomeScreen` or the `SplashScreenWithLeftBackground` component.\&quot;,\&quot;/android/app/src/main/res/drawable/ic_launcher_background.xml\&quot;:\&quot;This file is an XML resource file that defines a layered drawable for a splash screen in an Android application. It does not contain any classes or functions, but rather defines the visual elements that should be displayed on the splash screen.\\n\\nThe file consists of a `\\u003clayer-list\\u003e` element, which is a drawable that can contain multiple layers. The first layer is a solid color background, and the second layer is a bitmap image that is centered within the drawable.\\n\\nThe file does not have any classes or functions, but rather defines the visual elements that should be displayed on the splash screen of an Android application.\&quot;,\&quot;/android/app/src/main/res/values/styles.xml\&quot;:\&quot;This file defines the styles and themes used in an Android application. It does not contain any classes or functions, but rather defines the following styles and themes:\\n\\n`AppTheme`: A custom theme that extends the `Theme.AppCompat.Light.NoActionBar` theme, setting the text color, edit text style, background, and status bar color.\\n\\n`ResetEditText`: A custom style that extends the default `Widget.EditText` style, setting the padding, text color, and hint text color for edit text views.\\n\\n`Theme.App.SplashScreen`: A custom splash screen theme that sets the background color, animated icon, and the theme to be used after the splash screen is dismissed.\\n\\nThe purpose of this file is to provide a centralized location for defining the visual styles and themes used throughout the Android application.\&quot;,\&quot;/android/app/google-services.json\&quot;:\&quot;This file appears to be a JSON configuration file for a Firebase project. It does not contain any classes or functions, but rather provides information about the project, including the project number, project ID, storage bucket, and client information. The file is used to configure the Firebase SDK for use in an Android application with the package name \\\&quot;com.clientname.eventmanagerapp\\\&quot;.\&quot;,\&quot;/components/ui/hstack/styles.tsx\&quot;:\&quot;This file defines a set of styles for a horizontal stack component using the `tva` utility from the `@gluestack-ui/nativewind-utils` library. It also checks if the application is running on the web or a native platform using the `isWeb` utility.\\n\\n`baseStyle`: A base style that is applied to the horizontal stack component, which includes common styles for web and native platforms.\\n\\n`hstackStyle`: A set of styles for the horizontal stack component, including variants for controlling the spacing between items and the direction of the stack.\\n\\nThe file does not contain any classes or functions, but rather defines a set of styles that can be used to create a consistent and responsive horizontal stack component across different platforms.\&quot;,\&quot;/tsconfig.json\&quot;:\&quot;This file appears to be a TypeScript configuration file for an Expo project. It does not contain any classes or functions, but rather sets up the project\\u0027s TypeScript configuration, including:\\n\\n1. Extending the base Expo TypeScript configuration.\\n2. Enabling strict type checking.\\n3. Defining path aliases for the project\\u0027s source files and the Tailwind CSS configuration file.\\n4. Specifying the files and directories to be included in the TypeScript compilation.\\n\\nThe purpose of this file is to configure the TypeScript compiler for the Expo project, ensuring consistent and type-safe development across the codebase.\&quot;,\&quot;/android/app/src/main/res/values/strings.xml\&quot;:\&quot;This file appears to be an XML resource file for an Android application called \\\&quot;EventManagerApp\\\&quot;. It contains several string resources that define the application\\u0027s name, the user interface style, and the splash screen behavior. There are no classes or functions defined in this file. The purpose of this file is to provide localized and configurable string resources for the application.\&quot;,\&quot;/android/app/src/main/res/values/colors.xml\&quot;:\&quot;This file appears to be an XML resource file that defines color values for a mobile application. It does not contain any classes or functions. Instead, it defines the following color resources:\\n\\n`splashscreen_background`: The background color for the application\\u0027s splash screen.\\n`iconBackground`: The background color for application icons.\\n`colorPrimary`: The primary color used throughout the application\\u0027s user interface.\\n`colorPrimaryDark`: The darker version of the primary color, often used for the status bar or other UI elements.\\n\\nThis file is typically used in Android development to centralize and manage the color palette of an application, making it easier to maintain and update the visual design consistently across the entire app.\&quot;,\&quot;/app/auth/splash-screen.tsx\&quot;:\&quot;This file exports the `SplashScreen` component, which is likely the main component for the splash screen in the authentication flow of the application.\&quot;,\&quot;/components/ui/hstack/index.tsx\&quot;:\&quot;This file does not contain any classes. It contains the following functions:\\n\\n`hstackStyle`: A function that generates a style object based on the provided props.\\n\\n`HStack`: A React component that renders a horizontal stack of views with the ability to control the spacing and direction of the stack.\\n\\nThis file is responsible for creating a reusable horizontal stack component in a React Native application, allowing for easy management of the layout and styling of the stack.\&quot;,\&quot;/components/ui/hstack/index.web.tsx\&quot;:\&quot;This file defines a React component called `HStack` that renders a horizontal stack of elements with customizable spacing and direction.\\n\\n`IHStackProps`: A type that defines the props for the `HStack` component, including the standard `div` props and the `VariantProps` from the `@gluestack-ui/nativewind-utils` library.\\n\\n`hstackStyle`: A function that generates a CSS class name based on the provided `space`, `reversed`, and `class` props.\\n\\n`HStack`: A React component that renders a `div` element with the CSS class generated by the `hstackStyle` function, and forwards the remaining props to the `div` element.\&quot;,\&quot;/android/app/src/main/res/values-night/colors.xml\&quot;:\&quot;This file does not contain any classes or functions. It appears to be an empty XML document with a `\\u003cresources/\\u003e` tag, which is typically used to store various resources such as strings, images, or other data used by an application.\&quot;,\&quot;/components/ui/gluestack-ui-provider/index.tsx\&quot;:\&quot;This file does not contain any classes. It contains the following functions:\\n\\n`getColorSchemeName`: This function takes a `ColorSchemeName` and a `ModeType` and returns the appropriate color scheme name (\\u0027light\\u0027 or \\u0027dark\\u0027) based on the provided mode.\\n\\n`GluestackUIProvider`: This function is a React component that provides a wrapper for the `OverlayProvider` and `ToastProvider` components from the `@gluestack-ui/overlay` and `@gluestack-ui/toast` libraries, respectively. It also applies the appropriate color scheme based on the provided mode and the device\\u0027s color scheme.\\n\\nThe file also imports the necessary dependencies and defines the `ModeType` type.\&quot;,\&quot;/app/index.tsx\&quot;:\&quot;This file does not contain any classes. It contains the following functions:\\n\\n`Index`: This function is a React component that renders a loading indicator and navigates to the \\\&quot;auth/splash-screen\\\&quot; route after a short delay.\\n\\nThe file serves as the entry point for the application, displaying a loading indicator while the app is initializing and then navigating to the splash screen.\&quot;,\&quot;/components/ui/vstack/index.web.tsx\&quot;:\&quot;This file defines a React component called `VStack` that renders a vertical stack of elements with customizable spacing and direction.\\n\\n`vstackStyle`: A function that generates a CSS class name based on the provided props.\\n\\n`VStack`: A React component that renders a vertical stack of elements with customizable spacing and direction.\&quot;,\&quot;/components/ui/toast/index.tsx\&quot;:\&quot;This file is a React component that provides a toast notification system for a React Native application. It uses the `@gluestack-ui/toast` library to create the toast functionality and the `@gluestack-ui/nativewind-utils` library to handle the styling of the toast components.\\n\\n`useToast`: A custom hook that creates a toast notification.\\n\\n`UIToast`: A component that represents the root of the toast notification.\\n\\n`toastStyle`: A function that returns a set of styles for the toast notification based on the provided variants.\\n\\n`toastTitleStyle`: A function that returns a set of styles for the toast title based on the provided variants.\\n\\n`toastDescriptionStyle`: A function that returns a set of styles for the toast description based on the provided variants.\\n\\n`Toast`: A React component that renders a toast notification with the provided props and styles.\\n\\n`ToastTitle`: A React component that renders the title of the toast notification with the provided props and styles.\\n\\n`ToastDescription`: A React component that renders the description of the toast notification with the provided props and styles.\&quot;,\&quot;/firebaseConfig.js\&quot;:\&quot;This file does not contain any classes or functions. Instead, it sets up a unified configuration for a Firebase application and initializes the Firebase services, including authentication and Firestore. The file exports the initialized `auth` and `firestore` services for use in other parts of the application.\\n\\nThe main steps performed in this file are:\\n\\n1. Import the necessary Firebase modules.\\n2. Define a unified Firebase configuration object.\\n3. Initialize the Firebase app if it hasn\\u0027t been done already.\\n4. Initialize the Firebase services (auth, firestore, and messaging) using the initialized app.\\n5. Export the initialized `auth` and `firestore` services for use in other parts of the application.\&quot;,\&quot;/app/auth/signin.tsx\&quot;:\&quot;This file appears to be a simple import statement that imports the `SignIn` component from the `@/screens/auth/signin/signin` module and exports it as the default export.\\n\\nThe file does not contain any classes or functions, but rather serves as a way to centralize the import and export of the `SignIn` component, which is likely a part of a larger application or project.\&quot;,\&quot;/components/ui/vstack/styles.tsx\&quot;:\&quot;This file defines a set of styles for a vertical stack component using the `tva` (Tailwind Variant Adapter) utility from the `@gluestack-ui/nativewind-utils` package. The file does not contain any classes or functions, but rather defines a set of styles that can be used to create a vertical stack component with various spacing and direction options.\\n\\n`baseStyle`: A base style that is applied to the vertical stack component, which includes styles for layout, border, and background.\\n\\n`vstackStyle`: A set of styles for the vertical stack component, which includes variants for controlling the spacing between items and the direction of the stack (normal or reversed).\\n\\nIn summary, this file provides a reusable set of styles for creating a vertical stack component with customizable spacing and direction options.\&quot;,\&quot;/components/ui/heading/index.web.tsx\&quot;:\&quot;This file defines a React component called `Heading` that renders a heading element with various style and formatting options. It also defines a helper component called `MappedHeading` that handles the rendering of the heading element based on the provided size prop.\\n\\n`headingStyle`: A function that generates a CSS class name based on the provided style options.\\n\\n`MappedHeading`: A memoized and forwarded React component that renders the appropriate heading element (h1, h2, etc.) based on the provided size prop.\\n\\n`Heading`: A memoized and forwarded React component that serves as the main entry point for the `Heading` component. It handles the rendering of the heading element, either by using the `MappedHeading` component or by rendering a custom component specified by the `as` prop.\&quot;,\&quot;/components/ui/spinner/index.tsx\&quot;:\&quot;This file is a React component that creates a spinner UI element using the `@gluestack-ui/spinner` library and the `nativewind` utility. It exports a `Spinner` component that can be used in a React Native application.\\n\\n`UISpinner`: A spinner component created using the `createSpinner` function from the `@gluestack-ui/spinner` library.\\n\\n`spinnerStyle`: A function that creates a style object using the `tva` utility from `@gluestack-ui/nativewind-utils/tva`.\\n\\n`Spinner`: A React component that wraps the `UISpinner` component and applies the `spinnerStyle` to it, allowing for customization of the spinner\\u0027s appearance.\&quot;,\&quot;/README.md\&quot;:\&quot;This file does not contain any classes or functions. It is a README file that provides an overview of an Expo project created with `create-expo-app`. The file includes instructions for getting started, resetting the project, and learning more about developing with Expo. It also provides information about the Expo community and resources for further learning.\&quot;}&quot;}" />
    <option name="fileSkeletonMaps" value="{&quot;C:/Users/PC-PC/Desktop/EjasEventManagerApp/EventManagerApp&quot;:&quot;{\&quot;/android/app/src/debug/AndroidManifest.xml\&quot;:{\&quot;file_path\&quot;:\&quot;/android/app/src/debug/AndroidManifest.xml\&quot;,\&quot;file_name\&quot;:\&quot;AndroidManifest.xml\&quot;,\&quot;methods\&quot;:[]},\&quot;/android/app/src/main/java/com/clientname/eventmanagerapp/MainActivity.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/android/app/src/main/java/com/clientname/eventmanagerapp/MainActivity.kt\&quot;,\&quot;file_name\&quot;:\&quot;MainActivity.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/android/app/src/main/java/com/clientname/eventmanagerapp/MainApplication.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/android/app/src/main/java/com/clientname/eventmanagerapp/MainApplication.kt\&quot;,\&quot;file_name\&quot;:\&quot;MainApplication.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/android/app/src/main/res/drawable/ic_launcher_background.xml\&quot;:{\&quot;file_path\&quot;:\&quot;/android/app/src/main/res/drawable/ic_launcher_background.xml\&quot;,\&quot;file_name\&quot;:\&quot;ic_launcher_background.xml\&quot;,\&quot;methods\&quot;:[]},\&quot;/android/app/src/main/res/drawable/rn_edit_text_material.xml\&quot;:{\&quot;file_path\&quot;:\&quot;/android/app/src/main/res/drawable/rn_edit_text_material.xml\&quot;,\&quot;file_name\&quot;:\&quot;rn_edit_text_material.xml\&quot;,\&quot;methods\&quot;:[]},\&quot;/android/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml\&quot;:{\&quot;file_path\&quot;:\&quot;/android/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml\&quot;,\&quot;file_name\&quot;:\&quot;ic_launcher.xml\&quot;,\&quot;methods\&quot;:[]},\&quot;/android/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml\&quot;:{\&quot;file_path\&quot;:\&quot;/android/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml\&quot;,\&quot;file_name\&quot;:\&quot;ic_launcher_round.xml\&quot;,\&quot;methods\&quot;:[]},\&quot;/android/app/src/main/res/values/colors.xml\&quot;:{\&quot;file_path\&quot;:\&quot;/android/app/src/main/res/values/colors.xml\&quot;,\&quot;file_name\&quot;:\&quot;colors.xml\&quot;,\&quot;methods\&quot;:[]},\&quot;/android/app/src/main/res/values/strings.xml\&quot;:{\&quot;file_path\&quot;:\&quot;/android/app/src/main/res/values/strings.xml\&quot;,\&quot;file_name\&quot;:\&quot;strings.xml\&quot;,\&quot;methods\&quot;:[]},\&quot;/android/app/src/main/res/values/styles.xml\&quot;:{\&quot;file_path\&quot;:\&quot;/android/app/src/main/res/values/styles.xml\&quot;,\&quot;file_name\&quot;:\&quot;styles.xml\&quot;,\&quot;methods\&quot;:[]},\&quot;/android/app/src/main/res/values-night/colors.xml\&quot;:{\&quot;file_path\&quot;:\&quot;/android/app/src/main/res/values-night/colors.xml\&quot;,\&quot;file_name\&quot;:\&quot;colors.xml\&quot;,\&quot;methods\&quot;:[]},\&quot;/android/app/src/main/AndroidManifest.xml\&quot;:{\&quot;file_path\&quot;:\&quot;/android/app/src/main/AndroidManifest.xml\&quot;,\&quot;file_name\&quot;:\&quot;AndroidManifest.xml\&quot;,\&quot;methods\&quot;:[]},\&quot;/android/app/google-services.json\&quot;:{\&quot;file_path\&quot;:\&quot;/android/app/google-services.json\&quot;,\&quot;file_name\&quot;:\&quot;google-services.json\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/auth/signin.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/app/auth/signin.tsx\&quot;,\&quot;file_name\&quot;:\&quot;signin.tsx\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/auth/splash-screen.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/app/auth/splash-screen.tsx\&quot;,\&quot;file_name\&quot;:\&quot;splash-screen.tsx\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/user/dashboard.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/app/user/dashboard.tsx\&quot;,\&quot;file_name\&quot;:\&quot;dashboard.tsx\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;Dashboard\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[4,7],[11,1]],\&quot;indexes\&quot;:[139,299]}]},\&quot;/app/_layout.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/app/_layout.tsx\&quot;,\&quot;file_name\&quot;:\&quot;_layout.tsx\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/index.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/app/index.tsx\&quot;,\&quot;file_name\&quot;:\&quot;index.tsx\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;Index\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[5,0],[20,1]],\&quot;indexes\&quot;:[195,594]}]},\&quot;/components/ui/button/index.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/components/ui/button/index.tsx\&quot;,\&quot;file_name\&quot;:\&quot;index.tsx\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;buttonIconStyle\&quot;,\&quot;method_parameters\&quot;:\&quot;({\\r\\n        parentVariants: {\\r\\n          size: parentSize,\\r\\n          variant: parentVariant,\\r\\n          action: parentAction,\\r\\n        },\\r\\n        size,\\r\\n        class: className,\\r\\n      })\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[457,17],[466,15]],\&quot;indexes\&quot;:[13353,13576]}]},\&quot;/components/ui/checkbox/index.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/components/ui/checkbox/index.tsx\&quot;,\&quot;file_name\&quot;:\&quot;index.tsx\&quot;,\&quot;methods\&quot;:[]},\&quot;/components/ui/form-control/index.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/components/ui/form-control/index.tsx\&quot;,\&quot;file_name\&quot;:\&quot;index.tsx\&quot;,\&quot;methods\&quot;:[]},\&quot;/components/ui/gluestack-ui-provider/config.ts\&quot;:{\&quot;file_path\&quot;:\&quot;/components/ui/gluestack-ui-provider/config.ts\&quot;,\&quot;file_name\&quot;:\&quot;config.ts\&quot;,\&quot;methods\&quot;:[]},\&quot;/components/ui/gluestack-ui-provider/index.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/components/ui/gluestack-ui-provider/index.tsx\&quot;,\&quot;file_name\&quot;:\&quot;index.tsx\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;getColorSchemeName\&quot;,\&quot;method_parameters\&quot;:\&quot;(\\r\\n  colorScheme: ColorSchemeName,\\r\\n  mode: ModeType\\r\\n)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ColorSchemeName\&quot;,\&quot;name\&quot;:\&quot;colorScheme\&quot;},{\&quot;type\&quot;:\&quot;ModeType\&quot;,\&quot;name\&quot;:\&quot;mode\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[9,0],[17,2]],\&quot;indexes\&quot;:[368,562]},{\&quot;method_name\&quot;:\&quot;GluestackUIProvider\&quot;,\&quot;method_parameters\&quot;:\&quot;({\\r\\n  mode \\u003d \\u0027light\\u0027,\\r\\n  ...props\\r\\n}: {\\r\\n  mode?: \\u0027light\\u0027 | \\u0027dark\\u0027 | \\u0027system\\u0027;\\r\\n  children?: React.ReactNode;\\r\\n  style?: ViewProps[\\u0027style\\u0027];\\r\\n})\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;{\\r\\n  mode?: \\u0027light\\u0027 | \\u0027dark\\u0027 | \\u0027system\\u0027;\\r\\n  children?: React.ReactNode;\\r\\n  style?: ViewProps[\\u0027style\\u0027];\\r\\n}\&quot;,\&quot;name\&quot;:\&quot;\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[19,7],[46,1]],\&quot;indexes\&quot;:[573,1183]}]},\&quot;/components/ui/gluestack-ui-provider/index.web.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/components/ui/gluestack-ui-provider/index.web.tsx\&quot;,\&quot;file_name\&quot;:\&quot;index.web.tsx\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;createStyle\&quot;,\&quot;method_parameters\&quot;:\&quot;(styleTagId: string)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;string\&quot;,\&quot;name\&quot;:\&quot;styleTagId\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[9,0],[14,2]],\&quot;indexes\&quot;:[381,574]},{\&quot;method_name\&quot;:\&quot;GluestackUIProvider\&quot;,\&quot;method_parameters\&quot;:\&quot;({\\r\\n  mode \\u003d \\u0027light\\u0027,\\r\\n  ...props\\r\\n}: {\\r\\n  mode?: \\u0027light\\u0027 | \\u0027dark\\u0027 | \\u0027system\\u0027;\\r\\n  children?: React.ReactNode;\\r\\n})\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;{\\r\\n  mode?: \\u0027light\\u0027 | \\u0027dark\\u0027 | \\u0027system\\u0027;\\r\\n  children?: React.ReactNode;\\r\\n}\&quot;,\&quot;name\&quot;:\&quot;\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[19,7],[93,1]],\&quot;indexes\&quot;:[687,2927]}]},\&quot;/components/ui/gluestack-ui-provider/script.ts\&quot;:{\&quot;file_path\&quot;:\&quot;/components/ui/gluestack-ui-provider/script.ts\&quot;,\&quot;file_name\&quot;:\&quot;script.ts\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;script\&quot;,\&quot;method_parameters\&quot;:\&quot;(mode: string)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;string\&quot;,\&quot;name\&quot;:\&quot;mode\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[0,7],[18,2]],\&quot;indexes\&quot;:[7,568]},{\&quot;method_name\&quot;:\&quot;getSystemColorMode\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[3,2],[7,3]],\&quot;indexes\&quot;:[100,240]}]},\&quot;/components/ui/heading/index.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/components/ui/heading/index.tsx\&quot;,\&quot;file_name\&quot;:\&quot;index.tsx\&quot;,\&quot;methods\&quot;:[]},\&quot;/components/ui/heading/index.web.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/components/ui/heading/index.web.tsx\&quot;,\&quot;file_name\&quot;:\&quot;index.web.tsx\&quot;,\&quot;methods\&quot;:[]},\&quot;/components/ui/heading/styles.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/components/ui/heading/styles.tsx\&quot;,\&quot;file_name\&quot;:\&quot;styles.tsx\&quot;,\&quot;methods\&quot;:[]},\&quot;/components/ui/hstack/index.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/components/ui/hstack/index.tsx\&quot;,\&quot;file_name\&quot;:\&quot;index.tsx\&quot;,\&quot;methods\&quot;:[]},\&quot;/components/ui/hstack/index.web.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/components/ui/hstack/index.web.tsx\&quot;,\&quot;file_name\&quot;:\&quot;index.web.tsx\&quot;,\&quot;methods\&quot;:[]},\&quot;/components/ui/hstack/styles.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/components/ui/hstack/styles.tsx\&quot;,\&quot;file_name\&quot;:\&quot;styles.tsx\&quot;,\&quot;methods\&quot;:[]},\&quot;/components/ui/icon/index.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/components/ui/icon/index.tsx\&quot;,\&quot;file_name\&quot;:\&quot;index.tsx\&quot;,\&quot;methods\&quot;:[]},\&quot;/components/ui/icon/index.web.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/components/ui/icon/index.web.tsx\&quot;,\&quot;file_name\&quot;:\&quot;index.web.tsx\&quot;,\&quot;methods\&quot;:[]},\&quot;/components/ui/image/index.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/components/ui/image/index.tsx\&quot;,\&quot;file_name\&quot;:\&quot;index.tsx\&quot;,\&quot;methods\&quot;:[]},\&quot;/components/ui/input/index.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/components/ui/input/index.tsx\&quot;,\&quot;file_name\&quot;:\&quot;index.tsx\&quot;,\&quot;methods\&quot;:[]},\&quot;/components/ui/link/index.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/components/ui/link/index.tsx\&quot;,\&quot;file_name\&quot;:\&quot;index.tsx\&quot;,\&quot;methods\&quot;:[]},\&quot;/components/ui/pressable/index.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/components/ui/pressable/index.tsx\&quot;,\&quot;file_name\&quot;:\&quot;index.tsx\&quot;,\&quot;methods\&quot;:[]},\&quot;/components/ui/safe-area-view/index.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/components/ui/safe-area-view/index.tsx\&quot;,\&quot;file_name\&quot;:\&quot;index.tsx\&quot;,\&quot;methods\&quot;:[]},\&quot;/components/ui/scroll-view/index.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/components/ui/scroll-view/index.tsx\&quot;,\&quot;file_name\&quot;:\&quot;index.tsx\&quot;,\&quot;methods\&quot;:[]},\&quot;/components/ui/spinner/index.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/components/ui/spinner/index.tsx\&quot;,\&quot;file_name\&quot;:\&quot;index.tsx\&quot;,\&quot;methods\&quot;:[]},\&quot;/components/ui/text/index.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/components/ui/text/index.tsx\&quot;,\&quot;file_name\&quot;:\&quot;index.tsx\&quot;,\&quot;methods\&quot;:[]},\&quot;/components/ui/text/index.web.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/components/ui/text/index.web.tsx\&quot;,\&quot;file_name\&quot;:\&quot;index.web.tsx\&quot;,\&quot;methods\&quot;:[]},\&quot;/components/ui/text/styles.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/components/ui/text/styles.tsx\&quot;,\&quot;file_name\&quot;:\&quot;styles.tsx\&quot;,\&quot;methods\&quot;:[]},\&quot;/components/ui/toast/index.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/components/ui/toast/index.tsx\&quot;,\&quot;file_name\&quot;:\&quot;index.tsx\&quot;,\&quot;methods\&quot;:[]},\&quot;/components/ui/vstack/index.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/components/ui/vstack/index.tsx\&quot;,\&quot;file_name\&quot;:\&quot;index.tsx\&quot;,\&quot;methods\&quot;:[]},\&quot;/components/ui/vstack/index.web.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/components/ui/vstack/index.web.tsx\&quot;,\&quot;file_name\&quot;:\&quot;index.web.tsx\&quot;,\&quot;methods\&quot;:[]},\&quot;/components/ui/vstack/styles.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/components/ui/vstack/styles.tsx\&quot;,\&quot;file_name\&quot;:\&quot;styles.tsx\&quot;,\&quot;methods\&quot;:[]},\&quot;/screens/auth/layout/_layout.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/screens/auth/layout/_layout.tsx\&quot;,\&quot;file_name\&quot;:\&quot;_layout.tsx\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;AuthLayout\&quot;,\&quot;method_parameters\&quot;:\&quot;(props: AuthLayoutProps)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;AuthLayoutProps\&quot;,\&quot;name\&quot;:\&quot;props\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[18,0],[45,1]],\&quot;indexes\&quot;:[497,1479]}]},\&quot;/screens/auth/screen-splash/assets/icons/gluestack-icon/index.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/screens/auth/screen-splash/assets/icons/gluestack-icon/index.tsx\&quot;,\&quot;file_name\&quot;:\&quot;index.tsx\&quot;,\&quot;methods\&quot;:[]},\&quot;/screens/auth/screen-splash/screen-splash.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/screens/auth/screen-splash/screen-splash.tsx\&quot;,\&quot;file_name\&quot;:\&quot;screen-splash.tsx\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;SplashScreenWithLeftBackground\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[10,0],[42,1]],\&quot;indexes\&quot;:[444,1466]},{\&quot;method_name\&quot;:\&quot;RedirectToHomeScreen\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[44,0],[48,1]],\&quot;indexes\&quot;:[1470,1589]},{\&quot;method_name\&quot;:\&quot;SplashScreen\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[50,7],[66,1]],\&quot;indexes\&quot;:[1600,2043]}]},\&quot;/screens/auth/signin/signin.tsx\&quot;:{\&quot;file_path\&quot;:\&quot;/screens/auth/signin/signin.tsx\&quot;,\&quot;file_name\&quot;:\&quot;signin.tsx\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;onSubmit\&quot;,\&quot;method_parameters\&quot;:\&quot;(data: LoginSchemaType)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;LoginSchemaType\&quot;,\&quot;name\&quot;:\&quot;data\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[67,2],[99,3]],\&quot;indexes\&quot;:[2150,3175]},{\&quot;method_name\&quot;:\&quot;handleState\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[101,2],[105,3]],\&quot;indexes\&quot;:[3181,3282]},{\&quot;method_name\&quot;:\&quot;handleKeyPress\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[106,2],[109,3]],\&quot;indexes\&quot;:[3286,3375]}]},\&quot;/app.json\&quot;:{\&quot;file_path\&quot;:\&quot;/app.json\&quot;,\&quot;file_name\&quot;:\&quot;app.json\&quot;,\&quot;methods\&quot;:[]},\&quot;/babel.config.js\&quot;:{\&quot;file_path\&quot;:\&quot;/babel.config.js\&quot;,\&quot;file_name\&quot;:\&quot;babel.config.js\&quot;,\&quot;methods\&quot;:[]},\&quot;/firebaseConfig.js\&quot;:{\&quot;file_path\&quot;:\&quot;/firebaseConfig.js\&quot;,\&quot;file_name\&quot;:\&quot;firebaseConfig.js\&quot;,\&quot;methods\&quot;:[]},\&quot;/global.css\&quot;:{\&quot;file_path\&quot;:\&quot;/global.css\&quot;,\&quot;file_name\&quot;:\&quot;global.css\&quot;,\&quot;methods\&quot;:[]},\&quot;/gluestack-ui.config.json\&quot;:{\&quot;file_path\&quot;:\&quot;/gluestack-ui.config.json\&quot;,\&quot;file_name\&quot;:\&quot;gluestack-ui.config.json\&quot;,\&quot;methods\&quot;:[]},\&quot;/google-services.json\&quot;:{\&quot;file_path\&quot;:\&quot;/google-services.json\&quot;,\&quot;file_name\&quot;:\&quot;google-services.json\&quot;,\&quot;methods\&quot;:[]},\&quot;/metro.config.js\&quot;:{\&quot;file_path\&quot;:\&quot;/metro.config.js\&quot;,\&quot;file_name\&quot;:\&quot;metro.config.js\&quot;,\&quot;methods\&quot;:[]},\&quot;/nativewind-env.d.ts\&quot;:{\&quot;file_path\&quot;:\&quot;/nativewind-env.d.ts\&quot;,\&quot;file_name\&quot;:\&quot;nativewind-env.d.ts\&quot;,\&quot;methods\&quot;:[]},\&quot;/package-lock.json\&quot;:{\&quot;file_path\&quot;:\&quot;/package-lock.json\&quot;,\&quot;file_name\&quot;:\&quot;package-lock.json\&quot;,\&quot;methods\&quot;:[]},\&quot;/package.json\&quot;:{\&quot;file_path\&quot;:\&quot;/package.json\&quot;,\&quot;file_name\&quot;:\&quot;package.json\&quot;,\&quot;methods\&quot;:[]},\&quot;/README.md\&quot;:{\&quot;file_path\&quot;:\&quot;/README.md\&quot;,\&quot;file_name\&quot;:\&quot;README.md\&quot;,\&quot;methods\&quot;:[]},\&quot;/tailwind.config.js\&quot;:{\&quot;file_path\&quot;:\&quot;/tailwind.config.js\&quot;,\&quot;file_name\&quot;:\&quot;tailwind.config.js\&quot;,\&quot;methods\&quot;:[]},\&quot;/tsconfig.json\&quot;:{\&quot;file_path\&quot;:\&quot;/tsconfig.json\&quot;,\&quot;file_name\&quot;:\&quot;tsconfig.json\&quot;,\&quot;methods\&quot;:[]}}&quot;}" />
  </component>
</project>